// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  password          String
  name              String?
  role              String    @default("CLIENT")
  serviceType       String?   // "formation" or "funding"
  
  // Account security fields
  isLocked          Boolean   @default(false)
  lockUntil         DateTime?
  isDisabled        Boolean   @default(false)
  failedLoginAttempts Int      @default(0)
  lastLogin         DateTime?
  lastFailedLogin   DateTime?
  resetToken        String?   @unique
  resetTokenExpiry  DateTime?
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  applications  Application[]
  assignedLeads Lead[]     @relation("AssignedTo")
  onboarding    OnboardingProfile?
  emailDrips    EmailDrip[]
  blogPosts     BlogPost[]

  @@map("users")
}

model Lead {
  id                String       @id @default(cuid())
  businessName      String
  contactName       String
  email             String
  phone             String?
  industry          String?
  yearsInBusiness   Int?
  annualRevenue     Float?
  status            String       @default("NEW")
  source            String?
  notes             String?
  assignedToId      String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  // Relations
  assignedTo        User?        @relation("AssignedTo", fields: [assignedToId], references: [id])
  application       Application?
  leadScore         LeadScore?

  @@map("leads")
}

model Application {
  id                    String            @id @default(cuid())
  userId                String            @unique
  leadId                String?           @unique

  // Business Information
  businessName          String
  businessType          String
  ein                   String?
  dateEstablished       DateTime?
  businessAddress       String?
  businessCity          String?
  businessState         String?
  businessZip           String?
  industry              String?

  // Financial Information
  annualRevenue         Float?
  monthlyRevenue        Float?
  creditScore           Int?
  existingDebt          Float?

  // Funding Request
  fundingAmount         Float?
  fundingPurpose        String?

  // Status
  status                String            @default("DRAFT")
  submittedAt           DateTime?
  reviewedAt            DateTime?
  approvedAt            DateTime?
  rejectedAt            DateTime?
  rejectionReason       String?

  // Documents
  documents             Document[]

  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  // Relations
  user                  User              @relation(fields: [userId], references: [id])
  lead                  Lead?             @relation(fields: [leadId], references: [id])

  @@map("applications")
}

model Document {
  id              String      @id @default(cuid())
  applicationId   String
  name            String
  type            String
  url             String
  uploadedAt      DateTime    @default(now())

  // Relations
  application     Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@map("documents")
}

model OnboardingProfile {
  id                    String    @id @default(cuid())
  userId                String    @unique

  // Progress tracking
  completionPercentage  Int       @default(0)
  currentStep           String    @default("welcome")
  isCompleted           Boolean   @default(false)

  // Question responses - Day 0-1
  businessType          String?
  yearsInOperation      String?
  currentCreditScore    String?

  // Day 1-2
  einUploaded           Boolean   @default(false)
  einNumber             String?

  // Day 2-3
  bankConnected         Boolean   @default(false)
  tradeLines            String?
  creditGoal            String?
  painPoints            String[]  @default([])

  // Day 4
  preferredCommunication String?  @default("email")
  referralSource        String?

  // Day 5-7
  budgetForPremium      String?
  teamSize              String?

  // Timestamps
  welcomeEmailSentAt    DateTime?
  day1EmailSentAt       DateTime?
  day2EmailSentAt       DateTime?
  day3EmailSentAt       DateTime?
  day4EmailSentAt       DateTime?
  day5EmailSentAt       DateTime?
  day7EmailSentAt       DateTime?
  day10EmailSentAt      DateTime?

  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Relations
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("onboarding_profiles")
}

model EmailDrip {
  id                String    @id @default(cuid())
  userId            String

  // Email details
  emailType         String    // "welcome", "day1_education", "day2_nudge", etc.
  subject           String
  sentAt            DateTime  @default(now())
  opened            Boolean   @default(false)
  openedAt          DateTime?
  clicked           Boolean   @default(false)
  clickedAt         DateTime?

  // Tracking
  scheduledFor      DateTime?
  status            String    @default("sent") // "scheduled", "sent", "failed"

  createdAt         DateTime  @default(now())

  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_drips")
  @@index([userId])
  @@index([emailType])
  @@index([scheduledFor])
}

model Category {
  id              String   @id @default(cuid())
  name            String   @unique
  slug            String   @unique
  description     String?

  // SEO for category pages
  metaTitle       String?
  metaDescription String?

  blogPosts       BlogPost[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("categories")
}

model BlogPost {
  id              String   @id @default(cuid())
  title           String
  slug            String   @unique
  excerpt         String
  content         String   @db.Text
  featuredImage   String?

  // SEO Fields
  metaTitle       String?
  metaDescription String?
  jsonLd          Json?    // For structured data
  canonicalUrl    String?

  // Categories & Tags
  categoryId      String?
  tags            String[] // Array of tag strings

  // Status & Publishing
  status          String   @default("DRAFT") // DRAFT, PUBLISHED, SCHEDULED
  publishedAt     DateTime?
  scheduledFor    DateTime?

  // Author & Analytics
  authorId        String
  readingTime     Int?     // Calculated field in minutes
  viewCount       Int      @default(0)

  // Relations
  author          User     @relation(fields: [authorId], references: [id])
  category        Category? @relation(fields: [categoryId], references: [id])
  contentTopic    ContentTopic?
  performance     ContentPerformance?
  socialPosts     SocialPost[]

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("blog_posts")
  @@index([slug])
  @@index([status])
  @@index([publishedAt])
  @@index([authorId])
}

model NewsletterSubscriber {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  source        String   @default("website")
  interests     String[] @default([])
  isActive      Boolean  @default(true)
  subscribedAt  DateTime @default(now())
  unsubscribedAt DateTime?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("newsletter_subscribers")
  @@index([email])
  @@index([isActive])
  @@index([source])
}

model AuditLog {
  id          String   @id @default(cuid())
  userId      String
  action      String   // CREATE, READ, UPDATE, DELETE, LOGIN, LOGOUT, EXPORT, BULK_DELETE
  resource    String   // e.g., "User", "Application", "Lead"
  resourceId  String
  details     Json?    // Additional context about the action
  ipAddress   String?
  userAgent   String?

  createdAt   DateTime @default(now())

  @@map("audit_logs")
  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([createdAt])
}

// ========================================
// BLOG AUTOMATION SYSTEM MODELS
// ========================================

model ContentTopic {
  id                String   @id @default(cuid())
  topic             String
  category          String?
  searchVolume      Int?
  difficulty        Float?   // SEO difficulty 0-100
  priority          Int      @default(0) // Higher = more important
  status            String   @default("DISCOVERED") // DISCOVERED, PLANNED, IN_PROGRESS, PUBLISHED, ARCHIVED

  // Keyword data
  primaryKeyword    String?
  secondaryKeywords String[] @default([])

  // Research data
  competitorUrls    String[] @default([])
  searchIntent      String?  // informational, commercial, transactional, navigational
  targetAudience    String?

  // Planning
  assignedAgent     String?
  plannedPublishDate DateTime?

  // Relations
  blogPostId        String?  @unique
  blogPost          BlogPost? @relation(fields: [blogPostId], references: [id])
  keywords          ContentKeyword[]
  tasks             ContentTask[]

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("content_topics")
  @@index([status])
  @@index([priority])
  @@index([plannedPublishDate])
}

model ContentKeyword {
  id              String   @id @default(cuid())
  keyword         String
  searchVolume    Int?
  difficulty      Float?
  cpc             Float?   // Cost per click (for reference)
  trend           String?  // up, down, stable

  // Semantic clustering
  cluster         String?
  parentKeywordId String?

  // Usage tracking
  topicId         String?
  usedInPostIds   String[] @default([])

  // Relations
  topic           ContentTopic? @relation(fields: [topicId], references: [id])

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("content_keywords")
  @@index([keyword])
  @@index([cluster])
  @@index([topicId])
}

model ContentTask {
  id              String   @id @default(cuid())
  topicId         String?
  agentType       String   // PLANNER, WRITER, OPTIMIZER, PUBLISHER, DISTRIBUTOR, ANALYTICS, LEAD
  taskType        String   // RESEARCH, GENERATE, OPTIMIZE, PUBLISH, DISTRIBUTE, ANALYZE
  status          String   @default("PENDING") // PENDING, IN_PROGRESS, COMPLETED, FAILED

  // Task data
  input           Json?
  output          Json?
  errorMessage    String?

  // Scheduling
  scheduledFor    DateTime?
  startedAt       DateTime?
  completedAt     DateTime?

  // Relations
  topic           ContentTopic? @relation(fields: [topicId], references: [id])

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("content_tasks")
  @@index([agentType])
  @@index([status])
  @@index([scheduledFor])
  @@index([topicId])
}

model ContentPerformance {
  id              String   @id @default(cuid())
  blogPostId      String   @unique

  // Traffic metrics
  pageViews       Int      @default(0)
  uniqueVisitors  Int      @default(0)
  avgTimeOnPage   Float?   // seconds
  bounceRate      Float?   // percentage

  // SEO metrics
  organicTraffic  Int      @default(0)
  rankingKeywords String[] @default([])
  avgPosition     Float?
  impressions     Int      @default(0)
  clicks          Int      @default(0)
  ctr             Float?   // Click-through rate

  // Engagement metrics
  shares          Int      @default(0)
  comments        Int      @default(0)
  backlinks       Int      @default(0)

  // Conversion metrics
  leadsGenerated  Int      @default(0)
  conversionRate  Float?

  // Relations
  blogPost        BlogPost @relation(fields: [blogPostId], references: [id], onDelete: Cascade)

  lastUpdated     DateTime @updatedAt
  createdAt       DateTime @default(now())

  @@map("content_performance")
  @@index([organicTraffic])
  @@index([leadsGenerated])
}

model LeadScore {
  id              String   @id @default(cuid())
  leadId          String   @unique

  // Scoring components
  behaviorScore   Int      @default(0) // 0-100 based on engagement
  fitScore        Int      @default(0) // 0-100 based on qualification
  intentScore     Int      @default(0) // 0-100 based on buying signals
  totalScore      Int      @default(0) // Combined score

  // Behavioral data
  pagesViewed     Int      @default(0)
  timeOnSite      Float?   // seconds
  visitCount      Int      @default(0)
  lastVisit       DateTime?

  // Engagement tracking
  emailOpened     Boolean  @default(false)
  emailClicked    Boolean  @default(false)
  downloadedResource Boolean @default(false)

  // Classification
  segment         String?  // hot, warm, cold
  stage           String?  // awareness, consideration, decision

  // Relations
  lead            Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("lead_scores")
  @@index([totalScore])
  @@index([segment])
}

model SocialPost {
  id              String   @id @default(cuid())
  blogPostId      String
  platform        String   // linkedin, twitter, facebook

  // Post content
  content         String   @db.Text
  mediaUrls       String[] @default([])
  hashtags        String[] @default([])

  // Tracking
  postUrl         String?
  externalId      String?  // Platform's post ID

  // Metrics
  impressions     Int      @default(0)
  engagements     Int      @default(0)
  clicks          Int      @default(0)
  shares          Int      @default(0)

  // Status
  status          String   @default("DRAFT") // DRAFT, SCHEDULED, PUBLISHED, FAILED
  scheduledFor    DateTime?
  publishedAt     DateTime?

  // Relations
  blogPost        BlogPost @relation(fields: [blogPostId], references: [id], onDelete: Cascade)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("social_posts")
  @@index([blogPostId])
  @@index([platform])
  @@index([status])
  @@index([scheduledFor])
}

model ContentEmbedding {
  id              String   @id @default(cuid())
  contentId       String   // blogPostId or other content ID
  contentType     String   // blog_post, heading, paragraph

  // Content metadata
  text            String   @db.Text
  heading         String?
  url             String?

  // Embedding vector (requires pgvector extension)
  // In production: embedding  Unsupported("vector(1536)")
  embeddingData   Json     // Temporary JSON storage until pgvector is set up

  // Relations
  relatedContentIds String[] @default([])

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("content_embeddings")
  @@index([contentId])
  @@index([contentType])
}

model AgentLog {
  id              String   @id @default(cuid())
  agentType       String   // PLANNER, WRITER, OPTIMIZER, PUBLISHER, DISTRIBUTOR, ANALYTICS, LEAD
  action          String   // Action performed
  status          String   // SUCCESS, FAILED, PARTIAL

  // Execution data
  input           Json?
  output          Json?
  metrics         Json?    // Performance metrics
  errorMessage    String?

  // Timing
  duration        Int?     // milliseconds

  createdAt       DateTime @default(now())

  @@map("agent_logs")
  @@index([agentType])
  @@index([status])
  @@index([createdAt])
}

