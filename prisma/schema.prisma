// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String?
  role          String    @default("CLIENT")
  serviceType   String?   // "formation" or "funding"
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  applications  Application[]
  assignedLeads Lead[]     @relation("AssignedTo")
  onboarding    OnboardingProfile?
  emailDrips    EmailDrip[]
  blogPosts     BlogPost[]

  @@map("users")
}

model Lead {
  id                String       @id @default(cuid())
  businessName      String
  contactName       String
  email             String
  phone             String?
  industry          String?
  yearsInBusiness   Int?
  annualRevenue     Float?
  status            String       @default("NEW")
  source            String?
  notes             String?
  assignedToId      String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  // Relations
  assignedTo        User?        @relation("AssignedTo", fields: [assignedToId], references: [id])
  application       Application?

  @@map("leads")
}

model Application {
  id                    String            @id @default(cuid())
  userId                String            @unique
  leadId                String?           @unique

  // Business Information
  businessName          String
  businessType          String
  ein                   String?
  dateEstablished       DateTime?
  businessAddress       String?
  businessCity          String?
  businessState         String?
  businessZip           String?
  industry              String?

  // Financial Information
  annualRevenue         Float?
  monthlyRevenue        Float?
  creditScore           Int?
  existingDebt          Float?

  // Funding Request
  fundingAmount         Float?
  fundingPurpose        String?

  // Status
  status                String            @default("DRAFT")
  submittedAt           DateTime?
  reviewedAt            DateTime?
  approvedAt            DateTime?
  rejectedAt            DateTime?
  rejectionReason       String?

  // Documents
  documents             Document[]

  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  // Relations
  user                  User              @relation(fields: [userId], references: [id])
  lead                  Lead?             @relation(fields: [leadId], references: [id])

  @@map("applications")
}

model Document {
  id              String      @id @default(cuid())
  applicationId   String
  name            String
  type            String
  url             String
  uploadedAt      DateTime    @default(now())

  // Relations
  application     Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@map("documents")
}

model OnboardingProfile {
  id                    String    @id @default(cuid())
  userId                String    @unique

  // Progress tracking
  completionPercentage  Int       @default(0)
  currentStep           String    @default("welcome")
  isCompleted           Boolean   @default(false)

  // Question responses - Day 0-1
  businessType          String?
  yearsInOperation      String?
  currentCreditScore    String?

  // Day 1-2
  einUploaded           Boolean   @default(false)
  einNumber             String?

  // Day 2-3
  bankConnected         Boolean   @default(false)
  tradeLines            String?
  creditGoal            String?
  painPoints            String[]  @default([])

  // Day 4
  preferredCommunication String?  @default("email")
  referralSource        String?

  // Day 5-7
  budgetForPremium      String?
  teamSize              String?

  // Timestamps
  welcomeEmailSentAt    DateTime?
  day1EmailSentAt       DateTime?
  day2EmailSentAt       DateTime?
  day3EmailSentAt       DateTime?
  day4EmailSentAt       DateTime?
  day5EmailSentAt       DateTime?
  day7EmailSentAt       DateTime?
  day10EmailSentAt      DateTime?

  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Relations
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("onboarding_profiles")
}

model EmailDrip {
  id                String    @id @default(cuid())
  userId            String

  // Email details
  emailType         String    // "welcome", "day1_education", "day2_nudge", etc.
  subject           String
  sentAt            DateTime  @default(now())
  opened            Boolean   @default(false)
  openedAt          DateTime?
  clicked           Boolean   @default(false)
  clickedAt         DateTime?

  // Tracking
  scheduledFor      DateTime?
  status            String    @default("sent") // "scheduled", "sent", "failed"

  createdAt         DateTime  @default(now())

  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_drips")
  @@index([userId])
  @@index([emailType])
  @@index([scheduledFor])
}

model Category {
  id              String   @id @default(cuid())
  name            String   @unique
  slug            String   @unique
  description     String?

  // SEO for category pages
  metaTitle       String?
  metaDescription String?

  blogPosts       BlogPost[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("categories")
}

model BlogPost {
  id              String   @id @default(cuid())
  title           String
  slug            String   @unique
  excerpt         String
  content         String   @db.Text
  featuredImage   String?

  // SEO Fields
  metaTitle       String?
  metaDescription String?
  jsonLd          Json?    // For structured data
  canonicalUrl    String?

  // Categories & Tags
  categoryId      String?
  tags            String[] // Array of tag strings

  // Status & Publishing
  status          String   @default("DRAFT") // DRAFT, PUBLISHED, SCHEDULED
  publishedAt     DateTime?
  scheduledFor    DateTime?

  // Author & Analytics
  authorId        String
  readingTime     Int?     // Calculated field in minutes
  viewCount       Int      @default(0)

  // Relations
  author          User     @relation(fields: [authorId], references: [id])
  category        Category? @relation(fields: [categoryId], references: [id])

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("blog_posts")
  @@index([slug])
  @@index([status])
  @@index([publishedAt])
  @@index([authorId])
}

model NewsletterSubscriber {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  source        String   @default("website")
  interests     String[] @default([])
  isActive      Boolean  @default(true)
  subscribedAt  DateTime @default(now())
  unsubscribedAt DateTime?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("newsletter_subscribers")
  @@index([email])
  @@index([isActive])
  @@index([source])
}

model AuditLog {
  id          String   @id @default(cuid())
  userId      String
  action      String   // CREATE, READ, UPDATE, DELETE, LOGIN, LOGOUT, EXPORT, BULK_DELETE
  resource    String   // e.g., "User", "Application", "Lead"
  resourceId  String
  details     Json?    // Additional context about the action
  ipAddress   String?
  userAgent   String?

  createdAt   DateTime @default(now())

  @@map("audit_logs")
  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([createdAt])
}
